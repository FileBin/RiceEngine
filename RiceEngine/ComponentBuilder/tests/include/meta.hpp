#include "ReflectionHelper.hpp"

// autogenerated

namespace Meta {
template <> struct TypeOf<Testsssss> {
    static Type type() {
        Type type(Type::Struct, "Testsssss");
        std::unique_ptr<Field> fieldfield.reset(new Field{{Type::BuiltIn, "int"}, "i"});
        type.fields.push_back(std::move(field));
        field.reset(new Field{{Type::Struct, "std::basic_string<char>"}, "g"});
        type.fields.push_back(std::move(field));
        return type;
    }
};
template <> struct TypeOf<SUS> {
    static Type type() {
        Type type(Type::Struct, "SUS");
        std::unique_ptr<Field> fieldfield.reset(new Field{{Type::BuiltIn, "short"}, "kk"});
        type.fields.push_back(std::move(field));
        return type;
    }
};
template <> struct TypeOf<SUS::mememe> {
    static Type type() {
        Type type(Type::Struct, "SUS::mememe");
        std::unique_ptr<Field> fieldfield.reset(new Field{{Type::BuiltIn, "int"}, "inner_int"});
        type.fields.push_back(std::move(field));
        return type;
    }
};
} // namespace Meta